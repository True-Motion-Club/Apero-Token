// SPDX-License-Identifier: MIT
pragma solidity 0.8.11;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol";





  contract Apero is ERC20 {
  using SafeMath for uint256;
  uint Royalty = 3;
  address public owner;
  mapping(address => bool) public offRoyalty;

  constructor() ERC20("Apero", "APO") {
  _mint(msg.sender, 1000000000* 10 ** 18);
  owner = msg.sender;
  offRoyalty[msg.sender] == true;
}

   function transfer(address recipient, uint256 amount) public override returns (bool) {
   if(offRoyalty[msg.sender] == true) {
   _transfer(_msgSender(), recipient, amount);
   } else {
   uint royaltyFee = amount.mul(Royalty) / 100;
   _transfer(_msgSender(), owner, royaltyFee);
   _transfer(_msgSender(), recipient, amount.sub(royaltyFee));
   }
   return true;
  }
}